//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.TicTacToeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerObject", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.TicTacToeService.AdviserObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.TicTacToeService.PlayersGamesObject))]
    public partial class PlayerObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Rank {
            get {
                return this.RankField;
            }
            set {
                if ((object.ReferenceEquals(this.RankField, value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdviserObject", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class AdviserObject : Client.TicTacToeService.PlayerObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdviseIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdviseToField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdviseId {
            get {
                return this.AdviseIdField;
            }
            set {
                if ((this.AdviseIdField.Equals(value) != true)) {
                    this.AdviseIdField = value;
                    this.RaisePropertyChanged("AdviseId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdviseTo {
            get {
                return this.AdviseToField;
            }
            set {
                if ((object.ReferenceEquals(this.AdviseToField, value) != true)) {
                    this.AdviseToField = value;
                    this.RaisePropertyChanged("AdviseTo");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayersGamesObject", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class PlayersGamesObject : Client.TicTacToeService.PlayerObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfGamesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfGames {
            get {
                return this.NumOfGamesField;
            }
            set {
                if ((this.NumOfGamesField.Equals(value) != true)) {
                    this.NumOfGamesField = value;
                    this.RaisePropertyChanged("NumOfGames");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChampsObject", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ChampsObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameObject", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class GameObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BoardNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BoardSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.TicTacToeService.History StepsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BoardName {
            get {
                return this.BoardNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BoardNameField, value) != true)) {
                    this.BoardNameField = value;
                    this.RaisePropertyChanged("BoardName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BoardSize {
            get {
                return this.BoardSizeField;
            }
            set {
                if ((this.BoardSizeField.Equals(value) != true)) {
                    this.BoardSizeField = value;
                    this.RaisePropertyChanged("BoardSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player1Field, value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Player2Field, value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.TicTacToeService.History Steps {
            get {
                return this.StepsField;
            }
            set {
                if ((object.ReferenceEquals(this.StepsField, value) != true)) {
                    this.StepsField = value;
                    this.RaisePropertyChanged("Steps");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="History", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class History : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char starterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] stepsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char winnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char starter {
            get {
                return this.starterField;
            }
            set {
                if ((this.starterField.Equals(value) != true)) {
                    this.starterField = value;
                    this.RaisePropertyChanged("starter");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] steps {
            get {
                return this.stepsField;
            }
            set {
                if ((object.ReferenceEquals(this.stepsField, value) != true)) {
                    this.stepsField = value;
                    this.RaisePropertyChanged("steps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char winner {
            get {
                return this.winnerField;
            }
            set {
                if ((this.winnerField.Equals(value) != true)) {
                    this.winnerField = value;
                    this.RaisePropertyChanged("winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoardsObject", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class BoardsObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char ModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char Mode {
            get {
                return this.ModeField;
            }
            set {
                if ((this.ModeField.Equals(value) != true)) {
                    this.ModeField = value;
                    this.RaisePropertyChanged("Mode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityObject", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CityObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfChampsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfChamps {
            get {
                return this.NumOfChampsField;
            }
            set {
                if ((this.NumOfChampsField.Equals(value) != true)) {
                    this.NumOfChampsField = value;
                    this.RaisePropertyChanged("NumOfChamps");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicTacToeService.IGame", CallbackContract=typeof(Client.TicTacToeService.IGameCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Register")]
        void Register(Client.TicTacToeService.PlayerObject player, int[] lstAdvisers, int[] champs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Register")]
        System.Threading.Tasks.Task RegisterAsync(Client.TicTacToeService.PlayerObject player, int[] lstAdvisers, int[] champs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/LogIn")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.PlayerObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.ChampsObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.GameObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.History))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.PlayerObject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.AdviserObject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.AdviserObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.ChampsObject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.BoardsObject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.BoardsObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.GameObject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.PlayersGamesObject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.PlayersGamesObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.CityObject[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Client.TicTacToeService.CityObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(int[]))]
        void LogIn(string userName, object channel);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/LogIn")]
        System.Threading.Tasks.Task LogInAsync(string userName, object channel);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/RegisterBoard")]
        void RegisterBoard(string boardName, char mode, string userName, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/RegisterBoard")]
        System.Threading.Tasks.Task RegisterBoardAsync(string boardName, char mode, string userName, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/PlayAgain")]
        void PlayAgain(string boardName, char playMode, string userName, char token, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/PlayAgain")]
        System.Threading.Tasks.Task PlayAgainAsync(string boardName, char playMode, string userName, char token, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/LeaveGame")]
        void LeaveGame(string boardName, string userName, bool logOut);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/LeaveGame")]
        System.Threading.Tasks.Task LeaveGameAsync(string boardName, string userName, bool logOut);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/CommitTurn")]
        void CommitTurn(string boardName, char playMode, string userName, char tokenSender, int i, int j, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/CommitTurn")]
        System.Threading.Tasks.Task CommitTurnAsync(string boardName, char playMode, string userName, char tokenSender, int i, int j, int boardSize);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/closeClient")]
        void closeClient(string userName, string boardName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/closeClient")]
        System.Threading.Tasks.Task closeClientAsync(string userName, string boardName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getBoardsByMode")]
        void getBoardsByMode(string userName, char mode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getBoardsByMode")]
        System.Threading.Tasks.Task getBoardsByModeAsync(string userName, char mode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getBoardDetails")]
        void getBoardDetails(string userName, string boardName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getBoardDetails")]
        System.Threading.Tasks.Task getBoardDetailsAsync(string userName, string boardName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/getPlayersPerBoard", ReplyAction="http://tempuri.org/IGame/getPlayersPerBoardResponse")]
        int getPlayersPerBoard(string boardName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/getPlayersPerBoard", ReplyAction="http://tempuri.org/IGame/getPlayersPerBoardResponse")]
        System.Threading.Tasks.Task<int> getPlayersPerBoardAsync(string boardName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getRegisterInfo")]
        void getRegisterInfo();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getRegisterInfo")]
        System.Threading.Tasks.Task getRegisterInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updateInsertChamptionQuery")]
        void updateInsertChamptionQuery(Client.TicTacToeService.ChampsObject champ, bool update);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updateInsertChamptionQuery")]
        System.Threading.Tasks.Task updateInsertChamptionQueryAsync(Client.TicTacToeService.ChampsObject champ, bool update);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllGamesHistory")]
        void getAllGamesHistory(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllGamesHistory")]
        System.Threading.Tasks.Task getAllGamesHistoryAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllPlayersDetails")]
        void getAllPlayersDetails(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllPlayersDetails")]
        System.Threading.Tasks.Task getAllPlayersDetailsAsync(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllGamesDetails")]
        void getAllGamesDetails(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllGamesDetails")]
        System.Threading.Tasks.Task getAllGamesDetailsAsync(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllGamesDetailsToCB")]
        void getAllGamesDetailsToCB(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllGamesDetailsToCB")]
        System.Threading.Tasks.Task getAllGamesDetailsToCBAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllChampsDetails")]
        void getAllChampsDetails(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllChampsDetails")]
        System.Threading.Tasks.Task getAllChampsDetailsAsync(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllPlayersDetailsToCB")]
        void getAllPlayersDetailsToCB(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllPlayersDetailsToCB")]
        System.Threading.Tasks.Task getAllPlayersDetailsToCBAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getGamesByPlayerDetails")]
        void getGamesByPlayerDetails(string clientUserName, string selectedUserName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getGamesByPlayerDetails")]
        System.Threading.Tasks.Task getGamesByPlayerDetailsAsync(string clientUserName, string selectedUserName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getChampsByPlayerDetails")]
        void getChampsByPlayerDetails(string clientUserName, string selectedUserName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getChampsByPlayerDetails")]
        System.Threading.Tasks.Task getChampsByPlayerDetailsAsync(string clientUserName, string selectedUserName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getPlayersByGameDetails")]
        void getPlayersByGameDetails(string userName, Client.TicTacToeService.GameObject game, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getPlayersByGameDetails")]
        System.Threading.Tasks.Task getPlayersByGameDetailsAsync(string userName, Client.TicTacToeService.GameObject game, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAdvisersByGameDetails")]
        void getAdvisersByGameDetails(string userName, Client.TicTacToeService.GameObject game, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAdvisersByGameDetails")]
        System.Threading.Tasks.Task getAdvisersByGameDetailsAsync(string userName, Client.TicTacToeService.GameObject game, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllChampsDetailsToCB")]
        void getAllChampsDetailsToCB(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getAllChampsDetailsToCB")]
        System.Threading.Tasks.Task getAllChampsDetailsToCBAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getPlayersByChampDetails")]
        void getPlayersByChampDetails(string userName, Client.TicTacToeService.ChampsObject champ, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getPlayersByChampDetails")]
        System.Threading.Tasks.Task getPlayersByChampDetailsAsync(string userName, Client.TicTacToeService.ChampsObject champ, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getPlayersNumOfGames")]
        void getPlayersNumOfGames(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getPlayersNumOfGames")]
        System.Threading.Tasks.Task getPlayersNumOfGamesAsync(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getCityNumOfChamps")]
        void getCityNumOfChamps(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/getCityNumOfChamps")]
        System.Threading.Tasks.Task getCityNumOfChampsAsync(string userName, bool delay);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updatePlayersDB")]
        void updatePlayersDB(Client.TicTacToeService.PlayerObject[] players, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updatePlayersDB")]
        System.Threading.Tasks.Task updatePlayersDBAsync(Client.TicTacToeService.PlayerObject[] players, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updateAdviserDB")]
        void updateAdviserDB(Client.TicTacToeService.AdviserObject[] advisers, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updateAdviserDB")]
        System.Threading.Tasks.Task updateAdviserDBAsync(Client.TicTacToeService.AdviserObject[] advisers, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updateChampsDB")]
        void updateChampsDB(Client.TicTacToeService.ChampsObject[] champs, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/updateChampsDB")]
        System.Threading.Tasks.Task updateChampsDBAsync(Client.TicTacToeService.ChampsObject[] champs, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteOneRowFromPlayers")]
        void deleteOneRowFromPlayers(Client.TicTacToeService.PlayerObject player, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteOneRowFromPlayers")]
        System.Threading.Tasks.Task deleteOneRowFromPlayersAsync(Client.TicTacToeService.PlayerObject player, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteOneRowFromAdvisers")]
        void deleteOneRowFromAdvisers(Client.TicTacToeService.AdviserObject adviser, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteOneRowFromAdvisers")]
        System.Threading.Tasks.Task deleteOneRowFromAdvisersAsync(Client.TicTacToeService.AdviserObject adviser, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteOneRowFromChamps")]
        void deleteOneRowFromChamps(Client.TicTacToeService.ChampsObject champ, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteOneRowFromChamps")]
        System.Threading.Tasks.Task deleteOneRowFromChampsAsync(Client.TicTacToeService.ChampsObject champ, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteMultiRowFromPlayers")]
        void deleteMultiRowFromPlayers(string colHeader, string value, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteMultiRowFromPlayers")]
        System.Threading.Tasks.Task deleteMultiRowFromPlayersAsync(string colHeader, string value, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteMultiRowFromChamps")]
        void deleteMultiRowFromChamps(Client.TicTacToeService.ChampsObject champ, string colHeader, string value, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/deleteMultiRowFromChamps")]
        System.Threading.Tasks.Task deleteMultiRowFromChampsAsync(Client.TicTacToeService.ChampsObject champ, string colHeader, string value, string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/UpdateBoard")]
        void UpdateBoard(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/SwitchTurn")]
        void SwitchTurn();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/WriteStatus")]
        void WriteStatus(string str);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/setToken")]
        void setToken(char token);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/setStartTurn")]
        void setStartTurn(bool start);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/FinishGame")]
        void FinishGame(char token, int[] winIndexs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/displayRooms")]
        void displayRooms();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/validateRegisterUserName")]
        void validateRegisterUserName(string messaage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/ClientLogInFromRergister")]
        void ClientLogInFromRergister(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/validateLogInUserName")]
        void validateLogInUserName(bool exist, string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/sendListOfBoards")]
        void sendListOfBoards(Client.TicTacToeService.BoardsObject[] boards);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/sendBoardDetails")]
        void sendBoardDetails(Client.TicTacToeService.BoardsObject[] boards, int numberOfPlayers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/sendRegisterInfo")]
        void sendRegisterInfo(Client.TicTacToeService.PlayerObject[] advisers, Client.TicTacToeService.ChampsObject[] champs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/refreshChampsList")]
        void refreshChampsList(Client.TicTacToeService.ChampsObject[] champs);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/refreshAdvisersList")]
        void refreshAdvisersList(Client.TicTacToeService.PlayerObject[] advisers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showGameHistory")]
        void showGameHistory(Client.TicTacToeService.GameObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showPlayersQuery")]
        void showPlayersQuery(Client.TicTacToeService.PlayerObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showAdvisersQuery")]
        void showAdvisersQuery(Client.TicTacToeService.AdviserObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showGamesQuery")]
        void showGamesQuery(Client.TicTacToeService.GameObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showChampsQuery")]
        void showChampsQuery(Client.TicTacToeService.ChampsObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showAllPlayersInQueryToCB")]
        void showAllPlayersInQueryToCB(Client.TicTacToeService.PlayerObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showAllGamesInQueryToCB")]
        void showAllGamesInQueryToCB(Client.TicTacToeService.GameObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showAllChampsInQueryToCB")]
        void showAllChampsInQueryToCB(Client.TicTacToeService.ChampsObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showPlayersNumOfGamesQuery")]
        void showPlayersNumOfGamesQuery(Client.TicTacToeService.PlayersGamesObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/showCityNumOfChampsQuery")]
        void showCityNumOfChampsQuery(Client.TicTacToeService.CityObject[] arr);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/messageAndRefreshTable")]
        void messageAndRefreshTable(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : Client.TicTacToeService.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.DuplexClientBase<Client.TicTacToeService.IGame>, Client.TicTacToeService.IGame {
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Register(Client.TicTacToeService.PlayerObject player, int[] lstAdvisers, int[] champs) {
            base.Channel.Register(player, lstAdvisers, champs);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(Client.TicTacToeService.PlayerObject player, int[] lstAdvisers, int[] champs) {
            return base.Channel.RegisterAsync(player, lstAdvisers, champs);
        }
        
        public void LogIn(string userName, object channel) {
            base.Channel.LogIn(userName, channel);
        }
        
        public System.Threading.Tasks.Task LogInAsync(string userName, object channel) {
            return base.Channel.LogInAsync(userName, channel);
        }
        
        public void RegisterBoard(string boardName, char mode, string userName, int boardSize) {
            base.Channel.RegisterBoard(boardName, mode, userName, boardSize);
        }
        
        public System.Threading.Tasks.Task RegisterBoardAsync(string boardName, char mode, string userName, int boardSize) {
            return base.Channel.RegisterBoardAsync(boardName, mode, userName, boardSize);
        }
        
        public void PlayAgain(string boardName, char playMode, string userName, char token, int boardSize) {
            base.Channel.PlayAgain(boardName, playMode, userName, token, boardSize);
        }
        
        public System.Threading.Tasks.Task PlayAgainAsync(string boardName, char playMode, string userName, char token, int boardSize) {
            return base.Channel.PlayAgainAsync(boardName, playMode, userName, token, boardSize);
        }
        
        public void LeaveGame(string boardName, string userName, bool logOut) {
            base.Channel.LeaveGame(boardName, userName, logOut);
        }
        
        public System.Threading.Tasks.Task LeaveGameAsync(string boardName, string userName, bool logOut) {
            return base.Channel.LeaveGameAsync(boardName, userName, logOut);
        }
        
        public void CommitTurn(string boardName, char playMode, string userName, char tokenSender, int i, int j, int boardSize) {
            base.Channel.CommitTurn(boardName, playMode, userName, tokenSender, i, j, boardSize);
        }
        
        public System.Threading.Tasks.Task CommitTurnAsync(string boardName, char playMode, string userName, char tokenSender, int i, int j, int boardSize) {
            return base.Channel.CommitTurnAsync(boardName, playMode, userName, tokenSender, i, j, boardSize);
        }
        
        public void closeClient(string userName, string boardName) {
            base.Channel.closeClient(userName, boardName);
        }
        
        public System.Threading.Tasks.Task closeClientAsync(string userName, string boardName) {
            return base.Channel.closeClientAsync(userName, boardName);
        }
        
        public void getBoardsByMode(string userName, char mode) {
            base.Channel.getBoardsByMode(userName, mode);
        }
        
        public System.Threading.Tasks.Task getBoardsByModeAsync(string userName, char mode) {
            return base.Channel.getBoardsByModeAsync(userName, mode);
        }
        
        public void getBoardDetails(string userName, string boardName) {
            base.Channel.getBoardDetails(userName, boardName);
        }
        
        public System.Threading.Tasks.Task getBoardDetailsAsync(string userName, string boardName) {
            return base.Channel.getBoardDetailsAsync(userName, boardName);
        }
        
        public int getPlayersPerBoard(string boardName) {
            return base.Channel.getPlayersPerBoard(boardName);
        }
        
        public System.Threading.Tasks.Task<int> getPlayersPerBoardAsync(string boardName) {
            return base.Channel.getPlayersPerBoardAsync(boardName);
        }
        
        public void getRegisterInfo() {
            base.Channel.getRegisterInfo();
        }
        
        public System.Threading.Tasks.Task getRegisterInfoAsync() {
            return base.Channel.getRegisterInfoAsync();
        }
        
        public void updateInsertChamptionQuery(Client.TicTacToeService.ChampsObject champ, bool update) {
            base.Channel.updateInsertChamptionQuery(champ, update);
        }
        
        public System.Threading.Tasks.Task updateInsertChamptionQueryAsync(Client.TicTacToeService.ChampsObject champ, bool update) {
            return base.Channel.updateInsertChamptionQueryAsync(champ, update);
        }
        
        public void getAllGamesHistory(string userName) {
            base.Channel.getAllGamesHistory(userName);
        }
        
        public System.Threading.Tasks.Task getAllGamesHistoryAsync(string userName) {
            return base.Channel.getAllGamesHistoryAsync(userName);
        }
        
        public void getAllPlayersDetails(string userName, bool delay) {
            base.Channel.getAllPlayersDetails(userName, delay);
        }
        
        public System.Threading.Tasks.Task getAllPlayersDetailsAsync(string userName, bool delay) {
            return base.Channel.getAllPlayersDetailsAsync(userName, delay);
        }
        
        public void getAllGamesDetails(string userName, bool delay) {
            base.Channel.getAllGamesDetails(userName, delay);
        }
        
        public System.Threading.Tasks.Task getAllGamesDetailsAsync(string userName, bool delay) {
            return base.Channel.getAllGamesDetailsAsync(userName, delay);
        }
        
        public void getAllGamesDetailsToCB(string userName) {
            base.Channel.getAllGamesDetailsToCB(userName);
        }
        
        public System.Threading.Tasks.Task getAllGamesDetailsToCBAsync(string userName) {
            return base.Channel.getAllGamesDetailsToCBAsync(userName);
        }
        
        public void getAllChampsDetails(string userName, bool delay) {
            base.Channel.getAllChampsDetails(userName, delay);
        }
        
        public System.Threading.Tasks.Task getAllChampsDetailsAsync(string userName, bool delay) {
            return base.Channel.getAllChampsDetailsAsync(userName, delay);
        }
        
        public void getAllPlayersDetailsToCB(string userName) {
            base.Channel.getAllPlayersDetailsToCB(userName);
        }
        
        public System.Threading.Tasks.Task getAllPlayersDetailsToCBAsync(string userName) {
            return base.Channel.getAllPlayersDetailsToCBAsync(userName);
        }
        
        public void getGamesByPlayerDetails(string clientUserName, string selectedUserName, bool delay) {
            base.Channel.getGamesByPlayerDetails(clientUserName, selectedUserName, delay);
        }
        
        public System.Threading.Tasks.Task getGamesByPlayerDetailsAsync(string clientUserName, string selectedUserName, bool delay) {
            return base.Channel.getGamesByPlayerDetailsAsync(clientUserName, selectedUserName, delay);
        }
        
        public void getChampsByPlayerDetails(string clientUserName, string selectedUserName, bool delay) {
            base.Channel.getChampsByPlayerDetails(clientUserName, selectedUserName, delay);
        }
        
        public System.Threading.Tasks.Task getChampsByPlayerDetailsAsync(string clientUserName, string selectedUserName, bool delay) {
            return base.Channel.getChampsByPlayerDetailsAsync(clientUserName, selectedUserName, delay);
        }
        
        public void getPlayersByGameDetails(string userName, Client.TicTacToeService.GameObject game, bool delay) {
            base.Channel.getPlayersByGameDetails(userName, game, delay);
        }
        
        public System.Threading.Tasks.Task getPlayersByGameDetailsAsync(string userName, Client.TicTacToeService.GameObject game, bool delay) {
            return base.Channel.getPlayersByGameDetailsAsync(userName, game, delay);
        }
        
        public void getAdvisersByGameDetails(string userName, Client.TicTacToeService.GameObject game, bool delay) {
            base.Channel.getAdvisersByGameDetails(userName, game, delay);
        }
        
        public System.Threading.Tasks.Task getAdvisersByGameDetailsAsync(string userName, Client.TicTacToeService.GameObject game, bool delay) {
            return base.Channel.getAdvisersByGameDetailsAsync(userName, game, delay);
        }
        
        public void getAllChampsDetailsToCB(string userName) {
            base.Channel.getAllChampsDetailsToCB(userName);
        }
        
        public System.Threading.Tasks.Task getAllChampsDetailsToCBAsync(string userName) {
            return base.Channel.getAllChampsDetailsToCBAsync(userName);
        }
        
        public void getPlayersByChampDetails(string userName, Client.TicTacToeService.ChampsObject champ, bool delay) {
            base.Channel.getPlayersByChampDetails(userName, champ, delay);
        }
        
        public System.Threading.Tasks.Task getPlayersByChampDetailsAsync(string userName, Client.TicTacToeService.ChampsObject champ, bool delay) {
            return base.Channel.getPlayersByChampDetailsAsync(userName, champ, delay);
        }
        
        public void getPlayersNumOfGames(string userName, bool delay) {
            base.Channel.getPlayersNumOfGames(userName, delay);
        }
        
        public System.Threading.Tasks.Task getPlayersNumOfGamesAsync(string userName, bool delay) {
            return base.Channel.getPlayersNumOfGamesAsync(userName, delay);
        }
        
        public void getCityNumOfChamps(string userName, bool delay) {
            base.Channel.getCityNumOfChamps(userName, delay);
        }
        
        public System.Threading.Tasks.Task getCityNumOfChampsAsync(string userName, bool delay) {
            return base.Channel.getCityNumOfChampsAsync(userName, delay);
        }
        
        public void updatePlayersDB(Client.TicTacToeService.PlayerObject[] players, string userName) {
            base.Channel.updatePlayersDB(players, userName);
        }
        
        public System.Threading.Tasks.Task updatePlayersDBAsync(Client.TicTacToeService.PlayerObject[] players, string userName) {
            return base.Channel.updatePlayersDBAsync(players, userName);
        }
        
        public void updateAdviserDB(Client.TicTacToeService.AdviserObject[] advisers, string userName) {
            base.Channel.updateAdviserDB(advisers, userName);
        }
        
        public System.Threading.Tasks.Task updateAdviserDBAsync(Client.TicTacToeService.AdviserObject[] advisers, string userName) {
            return base.Channel.updateAdviserDBAsync(advisers, userName);
        }
        
        public void updateChampsDB(Client.TicTacToeService.ChampsObject[] champs, string userName) {
            base.Channel.updateChampsDB(champs, userName);
        }
        
        public System.Threading.Tasks.Task updateChampsDBAsync(Client.TicTacToeService.ChampsObject[] champs, string userName) {
            return base.Channel.updateChampsDBAsync(champs, userName);
        }
        
        public void deleteOneRowFromPlayers(Client.TicTacToeService.PlayerObject player, string userName) {
            base.Channel.deleteOneRowFromPlayers(player, userName);
        }
        
        public System.Threading.Tasks.Task deleteOneRowFromPlayersAsync(Client.TicTacToeService.PlayerObject player, string userName) {
            return base.Channel.deleteOneRowFromPlayersAsync(player, userName);
        }
        
        public void deleteOneRowFromAdvisers(Client.TicTacToeService.AdviserObject adviser, string userName) {
            base.Channel.deleteOneRowFromAdvisers(adviser, userName);
        }
        
        public System.Threading.Tasks.Task deleteOneRowFromAdvisersAsync(Client.TicTacToeService.AdviserObject adviser, string userName) {
            return base.Channel.deleteOneRowFromAdvisersAsync(adviser, userName);
        }
        
        public void deleteOneRowFromChamps(Client.TicTacToeService.ChampsObject champ, string userName) {
            base.Channel.deleteOneRowFromChamps(champ, userName);
        }
        
        public System.Threading.Tasks.Task deleteOneRowFromChampsAsync(Client.TicTacToeService.ChampsObject champ, string userName) {
            return base.Channel.deleteOneRowFromChampsAsync(champ, userName);
        }
        
        public void deleteMultiRowFromPlayers(string colHeader, string value, string userName) {
            base.Channel.deleteMultiRowFromPlayers(colHeader, value, userName);
        }
        
        public System.Threading.Tasks.Task deleteMultiRowFromPlayersAsync(string colHeader, string value, string userName) {
            return base.Channel.deleteMultiRowFromPlayersAsync(colHeader, value, userName);
        }
        
        public void deleteMultiRowFromChamps(Client.TicTacToeService.ChampsObject champ, string colHeader, string value, string userName) {
            base.Channel.deleteMultiRowFromChamps(champ, colHeader, value, userName);
        }
        
        public System.Threading.Tasks.Task deleteMultiRowFromChampsAsync(Client.TicTacToeService.ChampsObject champ, string colHeader, string value, string userName) {
            return base.Channel.deleteMultiRowFromChampsAsync(champ, colHeader, value, userName);
        }
    }
}
