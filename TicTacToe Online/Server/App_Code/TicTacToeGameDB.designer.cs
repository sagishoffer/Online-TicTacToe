#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TicTacToeDB")]
public partial class TicTacToeGameDBDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBoard(Board instance);
  partial void UpdateBoard(Board instance);
  partial void DeleteBoard(Board instance);
  partial void InsertPlayersChamp(PlayersChamp instance);
  partial void UpdatePlayersChamp(PlayersChamp instance);
  partial void DeletePlayersChamp(PlayersChamp instance);
  partial void InsertChamp(Champ instance);
  partial void UpdateChamp(Champ instance);
  partial void DeleteChamp(Champ instance);
  partial void InsertGamesHistory(GamesHistory instance);
  partial void UpdateGamesHistory(GamesHistory instance);
  partial void DeleteGamesHistory(GamesHistory instance);
  partial void InsertPlayerRank(PlayerRank instance);
  partial void UpdatePlayerRank(PlayerRank instance);
  partial void DeletePlayerRank(PlayerRank instance);
  partial void InsertPlayer(Player instance);
  partial void UpdatePlayer(Player instance);
  partial void DeletePlayer(Player instance);
  partial void InsertPlayersAdviser(PlayersAdviser instance);
  partial void UpdatePlayersAdviser(PlayersAdviser instance);
  partial void DeletePlayersAdviser(PlayersAdviser instance);
  #endregion
	
	public TicTacToeGameDBDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TicTacToeDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TicTacToeGameDBDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TicTacToeGameDBDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TicTacToeGameDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TicTacToeGameDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Board> Boards
	{
		get
		{
			return this.GetTable<Board>();
		}
	}
	
	public System.Data.Linq.Table<PlayersChamp> PlayersChamps
	{
		get
		{
			return this.GetTable<PlayersChamp>();
		}
	}
	
	public System.Data.Linq.Table<Champ> Champs
	{
		get
		{
			return this.GetTable<Champ>();
		}
	}
	
	public System.Data.Linq.Table<GamesHistory> GamesHistories
	{
		get
		{
			return this.GetTable<GamesHistory>();
		}
	}
	
	public System.Data.Linq.Table<PlayerRank> PlayerRanks
	{
		get
		{
			return this.GetTable<PlayerRank>();
		}
	}
	
	public System.Data.Linq.Table<Player> Players
	{
		get
		{
			return this.GetTable<Player>();
		}
	}
	
	public System.Data.Linq.Table<PlayersAdviser> PlayersAdvisers
	{
		get
		{
			return this.GetTable<PlayersAdviser>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Boards")]
public partial class Board : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _name;
	
	private int _size;
	
	private char _mode;
	
	private string _description;
	
	private EntitySet<GamesHistory> _GamesHistories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsizeChanging(int value);
    partial void OnsizeChanged();
    partial void OnmodeChanging(char value);
    partial void OnmodeChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
	
	public Board()
	{
		this._GamesHistories = new EntitySet<GamesHistory>(new Action<GamesHistory>(this.attach_GamesHistories), new Action<GamesHistory>(this.detach_GamesHistories));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="Int NOT NULL")]
	public int size
	{
		get
		{
			return this._size;
		}
		set
		{
			if ((this._size != value))
			{
				this.OnsizeChanging(value);
				this.SendPropertyChanging();
				this._size = value;
				this.SendPropertyChanged("size");
				this.OnsizeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mode", DbType="Char(1) NOT NULL")]
	public char mode
	{
		get
		{
			return this._mode;
		}
		set
		{
			if ((this._mode != value))
			{
				this.OnmodeChanging(value);
				this.SendPropertyChanging();
				this._mode = value;
				this.SendPropertyChanged("mode");
				this.OnmodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50)")]
	public string description
	{
		get
		{
			return this._description;
		}
		set
		{
			if ((this._description != value))
			{
				this.OndescriptionChanging(value);
				this.SendPropertyChanging();
				this._description = value;
				this.SendPropertyChanged("description");
				this.OndescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_GamesHistory", Storage="_GamesHistories", ThisKey="Id", OtherKey="boardID")]
	public EntitySet<GamesHistory> GamesHistories
	{
		get
		{
			return this._GamesHistories;
		}
		set
		{
			this._GamesHistories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_GamesHistories(GamesHistory entity)
	{
		this.SendPropertyChanging();
		entity.Board = this;
	}
	
	private void detach_GamesHistories(GamesHistory entity)
	{
		this.SendPropertyChanging();
		entity.Board = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayersChamps")]
public partial class PlayersChamp : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _playerID;
	
	private int _champID;
	
	private EntityRef<Champ> _Champ;
	
	private EntityRef<Player> _Player;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnplayerIDChanging(int value);
    partial void OnplayerIDChanged();
    partial void OnchampIDChanging(int value);
    partial void OnchampIDChanged();
    #endregion
	
	public PlayersChamp()
	{
		this._Champ = default(EntityRef<Champ>);
		this._Player = default(EntityRef<Player>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int playerID
	{
		get
		{
			return this._playerID;
		}
		set
		{
			if ((this._playerID != value))
			{
				if (this._Player.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnplayerIDChanging(value);
				this.SendPropertyChanging();
				this._playerID = value;
				this.SendPropertyChanged("playerID");
				this.OnplayerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_champID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int champID
	{
		get
		{
			return this._champID;
		}
		set
		{
			if ((this._champID != value))
			{
				if (this._Champ.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnchampIDChanging(value);
				this.SendPropertyChanging();
				this._champID = value;
				this.SendPropertyChanged("champID");
				this.OnchampIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Champ_PlayersChamp", Storage="_Champ", ThisKey="champID", OtherKey="Id", IsForeignKey=true)]
	public Champ Champ
	{
		get
		{
			return this._Champ.Entity;
		}
		set
		{
			Champ previousValue = this._Champ.Entity;
			if (((previousValue != value) 
						|| (this._Champ.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Champ.Entity = null;
					previousValue.PlayersChamps.Remove(this);
				}
				this._Champ.Entity = value;
				if ((value != null))
				{
					value.PlayersChamps.Add(this);
					this._champID = value.Id;
				}
				else
				{
					this._champID = default(int);
				}
				this.SendPropertyChanged("Champ");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersChamp", Storage="_Player", ThisKey="playerID", OtherKey="id", IsForeignKey=true)]
	public Player Player
	{
		get
		{
			return this._Player.Entity;
		}
		set
		{
			Player previousValue = this._Player.Entity;
			if (((previousValue != value) 
						|| (this._Player.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player.Entity = null;
					previousValue.PlayersChamps.Remove(this);
				}
				this._Player.Entity = value;
				if ((value != null))
				{
					value.PlayersChamps.Add(this);
					this._playerID = value.id;
				}
				else
				{
					this._playerID = default(int);
				}
				this.SendPropertyChanged("Player");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Champs")]
public partial class Champ : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _name;
	
	private System.DateTime _date;
	
	private string _city;
	
	private string _image;
	
	private EntitySet<PlayersChamp> _PlayersChamps;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    #endregion
	
	public Champ()
	{
		this._PlayersChamps = new EntitySet<PlayersChamp>(new Action<PlayersChamp>(this.attach_PlayersChamps), new Action<PlayersChamp>(this.detach_PlayersChamps));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
	public System.DateTime date
	{
		get
		{
			return this._date;
		}
		set
		{
			if ((this._date != value))
			{
				this.OndateChanging(value);
				this.SendPropertyChanging();
				this._date = value;
				this.SendPropertyChanged("date");
				this.OndateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="VarChar(20)")]
	public string city
	{
		get
		{
			return this._city;
		}
		set
		{
			if ((this._city != value))
			{
				this.OncityChanging(value);
				this.SendPropertyChanging();
				this._city = value;
				this.SendPropertyChanged("city");
				this.OncityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(1000)")]
	public string image
	{
		get
		{
			return this._image;
		}
		set
		{
			if ((this._image != value))
			{
				this.OnimageChanging(value);
				this.SendPropertyChanging();
				this._image = value;
				this.SendPropertyChanged("image");
				this.OnimageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Champ_PlayersChamp", Storage="_PlayersChamps", ThisKey="Id", OtherKey="champID")]
	public EntitySet<PlayersChamp> PlayersChamps
	{
		get
		{
			return this._PlayersChamps;
		}
		set
		{
			this._PlayersChamps.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PlayersChamps(PlayersChamp entity)
	{
		this.SendPropertyChanging();
		entity.Champ = this;
	}
	
	private void detach_PlayersChamps(PlayersChamp entity)
	{
		this.SendPropertyChanging();
		entity.Champ = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GamesHistory")]
public partial class GamesHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _boardID;
	
	private int _losser;
	
	private int _winner;
	
	private string _steps;
	
	private System.DateTime _date;
	
	private EntityRef<Board> _Board;
	
	private EntityRef<Player> _Player;
	
	private EntityRef<Player> _Player1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnboardIDChanging(int value);
    partial void OnboardIDChanged();
    partial void OnlosserChanging(int value);
    partial void OnlosserChanged();
    partial void OnwinnerChanging(int value);
    partial void OnwinnerChanged();
    partial void OnstepsChanging(string value);
    partial void OnstepsChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
	
	public GamesHistory()
	{
		this._Board = default(EntityRef<Board>);
		this._Player = default(EntityRef<Player>);
		this._Player1 = default(EntityRef<Player>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_boardID", DbType="Int NOT NULL")]
	public int boardID
	{
		get
		{
			return this._boardID;
		}
		set
		{
			if ((this._boardID != value))
			{
				if (this._Board.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnboardIDChanging(value);
				this.SendPropertyChanging();
				this._boardID = value;
				this.SendPropertyChanged("boardID");
				this.OnboardIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_losser", DbType="Int NOT NULL")]
	public int losser
	{
		get
		{
			return this._losser;
		}
		set
		{
			if ((this._losser != value))
			{
				if (this._Player.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnlosserChanging(value);
				this.SendPropertyChanging();
				this._losser = value;
				this.SendPropertyChanged("losser");
				this.OnlosserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winner", DbType="Int NOT NULL")]
	public int winner
	{
		get
		{
			return this._winner;
		}
		set
		{
			if ((this._winner != value))
			{
				if (this._Player1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnwinnerChanging(value);
				this.SendPropertyChanging();
				this._winner = value;
				this.SendPropertyChanged("winner");
				this.OnwinnerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_steps", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string steps
	{
		get
		{
			return this._steps;
		}
		set
		{
			if ((this._steps != value))
			{
				this.OnstepsChanging(value);
				this.SendPropertyChanging();
				this._steps = value;
				this.SendPropertyChanged("steps");
				this.OnstepsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
	public System.DateTime date
	{
		get
		{
			return this._date;
		}
		set
		{
			if ((this._date != value))
			{
				this.OndateChanging(value);
				this.SendPropertyChanging();
				this._date = value;
				this.SendPropertyChanged("date");
				this.OndateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Board_GamesHistory", Storage="_Board", ThisKey="boardID", OtherKey="Id", IsForeignKey=true)]
	public Board Board
	{
		get
		{
			return this._Board.Entity;
		}
		set
		{
			Board previousValue = this._Board.Entity;
			if (((previousValue != value) 
						|| (this._Board.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Board.Entity = null;
					previousValue.GamesHistories.Remove(this);
				}
				this._Board.Entity = value;
				if ((value != null))
				{
					value.GamesHistories.Add(this);
					this._boardID = value.Id;
				}
				else
				{
					this._boardID = default(int);
				}
				this.SendPropertyChanged("Board");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_GamesHistory", Storage="_Player", ThisKey="losser", OtherKey="id", IsForeignKey=true)]
	public Player Player
	{
		get
		{
			return this._Player.Entity;
		}
		set
		{
			Player previousValue = this._Player.Entity;
			if (((previousValue != value) 
						|| (this._Player.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player.Entity = null;
					previousValue.GamesHistories.Remove(this);
				}
				this._Player.Entity = value;
				if ((value != null))
				{
					value.GamesHistories.Add(this);
					this._losser = value.id;
				}
				else
				{
					this._losser = default(int);
				}
				this.SendPropertyChanged("Player");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_GamesHistory1", Storage="_Player1", ThisKey="winner", OtherKey="id", IsForeignKey=true)]
	public Player Player1
	{
		get
		{
			return this._Player1.Entity;
		}
		set
		{
			Player previousValue = this._Player1.Entity;
			if (((previousValue != value) 
						|| (this._Player1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player1.Entity = null;
					previousValue.GamesHistories1.Remove(this);
				}
				this._Player1.Entity = value;
				if ((value != null))
				{
					value.GamesHistories1.Add(this);
					this._winner = value.id;
				}
				else
				{
					this._winner = default(int);
				}
				this.SendPropertyChanged("Player1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerRank")]
public partial class PlayerRank : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _rank;
	
	private string _type;
	
	private EntitySet<Player> _Players;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnrankChanging(int value);
    partial void OnrankChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    #endregion
	
	public PlayerRank()
	{
		this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rank", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int rank
	{
		get
		{
			return this._rank;
		}
		set
		{
			if ((this._rank != value))
			{
				this.OnrankChanging(value);
				this.SendPropertyChanging();
				this._rank = value;
				this.SendPropertyChanged("rank");
				this.OnrankChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(15)")]
	public string type
	{
		get
		{
			return this._type;
		}
		set
		{
			if ((this._type != value))
			{
				this.OntypeChanging(value);
				this.SendPropertyChanging();
				this._type = value;
				this.SendPropertyChanged("type");
				this.OntypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRank_Player", Storage="_Players", ThisKey="rank", OtherKey="rank")]
	public EntitySet<Player> Players
	{
		get
		{
			return this._Players;
		}
		set
		{
			this._Players.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Players(Player entity)
	{
		this.SendPropertyChanging();
		entity.PlayerRank = this;
	}
	
	private void detach_Players(Player entity)
	{
		this.SendPropertyChanging();
		entity.PlayerRank = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _userName;
	
	private string _firstName;
	
	private string _lastName;
	
	private System.DateTime _created_at;
	
	private int _rank;
	
	private EntitySet<PlayersChamp> _PlayersChamps;
	
	private EntitySet<GamesHistory> _GamesHistories;
	
	private EntitySet<GamesHistory> _GamesHistories1;
	
	private EntityRef<PlayersAdviser> _PlayersAdviser;
	
	private EntitySet<PlayersAdviser> _PlayersAdvisers;
	
	private EntityRef<PlayerRank> _PlayerRank;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnfirstNameChanging(string value);
    partial void OnfirstNameChanged();
    partial void OnlastNameChanging(string value);
    partial void OnlastNameChanged();
    partial void Oncreated_atChanging(System.DateTime value);
    partial void Oncreated_atChanged();
    partial void OnrankChanging(int value);
    partial void OnrankChanged();
    #endregion
	
	public Player()
	{
		this._PlayersChamps = new EntitySet<PlayersChamp>(new Action<PlayersChamp>(this.attach_PlayersChamps), new Action<PlayersChamp>(this.detach_PlayersChamps));
		this._GamesHistories = new EntitySet<GamesHistory>(new Action<GamesHistory>(this.attach_GamesHistories), new Action<GamesHistory>(this.detach_GamesHistories));
		this._GamesHistories1 = new EntitySet<GamesHistory>(new Action<GamesHistory>(this.attach_GamesHistories1), new Action<GamesHistory>(this.detach_GamesHistories1));
		this._PlayersAdviser = default(EntityRef<PlayersAdviser>);
		this._PlayersAdvisers = new EntitySet<PlayersAdviser>(new Action<PlayersAdviser>(this.attach_PlayersAdvisers), new Action<PlayersAdviser>(this.detach_PlayersAdvisers));
		this._PlayerRank = default(EntityRef<PlayerRank>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string userName
	{
		get
		{
			return this._userName;
		}
		set
		{
			if ((this._userName != value))
			{
				this.OnuserNameChanging(value);
				this.SendPropertyChanging();
				this._userName = value;
				this.SendPropertyChanged("userName");
				this.OnuserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string firstName
	{
		get
		{
			return this._firstName;
		}
		set
		{
			if ((this._firstName != value))
			{
				this.OnfirstNameChanging(value);
				this.SendPropertyChanging();
				this._firstName = value;
				this.SendPropertyChanged("firstName");
				this.OnfirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastName", DbType="VarChar(20)")]
	public string lastName
	{
		get
		{
			return this._lastName;
		}
		set
		{
			if ((this._lastName != value))
			{
				this.OnlastNameChanging(value);
				this.SendPropertyChanging();
				this._lastName = value;
				this.SendPropertyChanged("lastName");
				this.OnlastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime NOT NULL")]
	public System.DateTime created_at
	{
		get
		{
			return this._created_at;
		}
		set
		{
			if ((this._created_at != value))
			{
				this.Oncreated_atChanging(value);
				this.SendPropertyChanging();
				this._created_at = value;
				this.SendPropertyChanged("created_at");
				this.Oncreated_atChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rank", DbType="Int NOT NULL")]
	public int rank
	{
		get
		{
			return this._rank;
		}
		set
		{
			if ((this._rank != value))
			{
				if (this._PlayerRank.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnrankChanging(value);
				this.SendPropertyChanging();
				this._rank = value;
				this.SendPropertyChanged("rank");
				this.OnrankChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersChamp", Storage="_PlayersChamps", ThisKey="id", OtherKey="playerID")]
	public EntitySet<PlayersChamp> PlayersChamps
	{
		get
		{
			return this._PlayersChamps;
		}
		set
		{
			this._PlayersChamps.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_GamesHistory", Storage="_GamesHistories", ThisKey="id", OtherKey="losser")]
	public EntitySet<GamesHistory> GamesHistories
	{
		get
		{
			return this._GamesHistories;
		}
		set
		{
			this._GamesHistories.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_GamesHistory1", Storage="_GamesHistories1", ThisKey="id", OtherKey="winner")]
	public EntitySet<GamesHistory> GamesHistories1
	{
		get
		{
			return this._GamesHistories1;
		}
		set
		{
			this._GamesHistories1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersAdviser", Storage="_PlayersAdviser", ThisKey="id", OtherKey="adviserID", IsUnique=true, IsForeignKey=false)]
	public PlayersAdviser PlayersAdviser
	{
		get
		{
			return this._PlayersAdviser.Entity;
		}
		set
		{
			PlayersAdviser previousValue = this._PlayersAdviser.Entity;
			if (((previousValue != value) 
						|| (this._PlayersAdviser.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PlayersAdviser.Entity = null;
					previousValue.Player = null;
				}
				this._PlayersAdviser.Entity = value;
				if ((value != null))
				{
					value.Player = this;
				}
				this.SendPropertyChanged("PlayersAdviser");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersAdviser1", Storage="_PlayersAdvisers", ThisKey="id", OtherKey="playerID")]
	public EntitySet<PlayersAdviser> PlayersAdvisers
	{
		get
		{
			return this._PlayersAdvisers;
		}
		set
		{
			this._PlayersAdvisers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRank_Player", Storage="_PlayerRank", ThisKey="rank", OtherKey="rank", IsForeignKey=true)]
	public PlayerRank PlayerRank
	{
		get
		{
			return this._PlayerRank.Entity;
		}
		set
		{
			PlayerRank previousValue = this._PlayerRank.Entity;
			if (((previousValue != value) 
						|| (this._PlayerRank.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PlayerRank.Entity = null;
					previousValue.Players.Remove(this);
				}
				this._PlayerRank.Entity = value;
				if ((value != null))
				{
					value.Players.Add(this);
					this._rank = value.rank;
				}
				else
				{
					this._rank = default(int);
				}
				this.SendPropertyChanged("PlayerRank");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PlayersChamps(PlayersChamp entity)
	{
		this.SendPropertyChanging();
		entity.Player = this;
	}
	
	private void detach_PlayersChamps(PlayersChamp entity)
	{
		this.SendPropertyChanging();
		entity.Player = null;
	}
	
	private void attach_GamesHistories(GamesHistory entity)
	{
		this.SendPropertyChanging();
		entity.Player = this;
	}
	
	private void detach_GamesHistories(GamesHistory entity)
	{
		this.SendPropertyChanging();
		entity.Player = null;
	}
	
	private void attach_GamesHistories1(GamesHistory entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = this;
	}
	
	private void detach_GamesHistories1(GamesHistory entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = null;
	}
	
	private void attach_PlayersAdvisers(PlayersAdviser entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = this;
	}
	
	private void detach_PlayersAdvisers(PlayersAdviser entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayersAdvisers")]
public partial class PlayersAdviser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _adviserID;
	
	private int _playerID;
	
	private EntityRef<Player> _Player;
	
	private EntityRef<Player> _Player1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnadviserIDChanging(int value);
    partial void OnadviserIDChanged();
    partial void OnplayerIDChanging(int value);
    partial void OnplayerIDChanged();
    #endregion
	
	public PlayersAdviser()
	{
		this._Player = default(EntityRef<Player>);
		this._Player1 = default(EntityRef<Player>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_adviserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int adviserID
	{
		get
		{
			return this._adviserID;
		}
		set
		{
			if ((this._adviserID != value))
			{
				if (this._Player.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnadviserIDChanging(value);
				this.SendPropertyChanging();
				this._adviserID = value;
				this.SendPropertyChanged("adviserID");
				this.OnadviserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_playerID", DbType="Int NOT NULL")]
	public int playerID
	{
		get
		{
			return this._playerID;
		}
		set
		{
			if ((this._playerID != value))
			{
				if (this._Player1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnplayerIDChanging(value);
				this.SendPropertyChanging();
				this._playerID = value;
				this.SendPropertyChanged("playerID");
				this.OnplayerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersAdviser", Storage="_Player", ThisKey="adviserID", OtherKey="id", IsForeignKey=true)]
	public Player Player
	{
		get
		{
			return this._Player.Entity;
		}
		set
		{
			Player previousValue = this._Player.Entity;
			if (((previousValue != value) 
						|| (this._Player.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player.Entity = null;
					previousValue.PlayersAdviser = null;
				}
				this._Player.Entity = value;
				if ((value != null))
				{
					value.PlayersAdviser = this;
					this._adviserID = value.id;
				}
				else
				{
					this._adviserID = default(int);
				}
				this.SendPropertyChanged("Player");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayersAdviser1", Storage="_Player1", ThisKey="playerID", OtherKey="id", IsForeignKey=true)]
	public Player Player1
	{
		get
		{
			return this._Player1.Entity;
		}
		set
		{
			Player previousValue = this._Player1.Entity;
			if (((previousValue != value) 
						|| (this._Player1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player1.Entity = null;
					previousValue.PlayersAdvisers.Remove(this);
				}
				this._Player1.Entity = value;
				if ((value != null))
				{
					value.PlayersAdvisers.Add(this);
					this._playerID = value.id;
				}
				else
				{
					this._playerID = default(int);
				}
				this.SendPropertyChanged("Player1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
